
<div id="NFTCardsContainerToBeFilled" class="row d-flex justify-content-center justify-content-sm-start row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5 row-cols-xl-6  g-3 gap-3 pt-2 px-3">
</div>



<script>
  let address = document.getElementById('address_lookup_search').value;//address_lookup_input; //"0xb1675086bd4a199e28b87E2bBDa9C825116da78F";
  let coingeckoEthAPICall="https://api.coingecko.com/api/v3/simple/price?ids=ethereum%2Cbitcoin&vs_currencies=usd";
  const opensea_assets_apiCall = "https://api.opensea.io/api/v1/assets?owner=";
  const collectionStatsApiCall = "";
  let firstupdate=1;
  let NFTCollections = new Array();
  let NFTAssets = {};
  let ETH_USD=1000;
  ETH_USDrefresh();

  let NFTStatsApiPromisesToBeCalled = [];
  const collectionAPICall = "https://api.opensea.io/api/v1/collection/";

  //getNFTFromAddress(address_lookup_input);
  //renderNFTCards();

  const scrollContainer = document.getElementById("Collection_Stats_Container");
  scrollContainer.addEventListener("wheel", (evt) => {
      evt.preventDefault();
      scrollContainer.scrollLeft += evt.deltaY;
  }, {passive: false});

  //json parser and fill HTML text
  async function getNFTFromAddress()
  {
    if(clearOldData())
    {
      address=document.getElementById('address_lookup_search').value;
      let NFTCallOBJ = await fetch(opensea_assets_apiCall+address);
      let NFTCallText = await NFTCallOBJ.text();

       NFTAssets = JSON.parse(NFTCallText);
       renderNFTCards();
    }
  }

function clearOldData()
{
  document.getElementById('NFTCardsContainerToBeFilled').innerHTML='';
  document.getElementById('Collection_Stats_Container').innerHTML='';
  document.getElementById('collection_stats_collapsed_container').innerHTML='';
  NFTAssets = {};
  NFTCollections = [];

  return true;
}

  async function renderNFTCards()
  {
      for (let i = 0; i < NFTAssets.assets.length; i++)
      {
        let NFTID = NFTAssets.assets[i].id;
        let NFTImage= NFTAssets.assets[i].image_url;
        let NFTName= NFTAssets.assets[i].name;
        let NFTpermalink=NFTAssets.assets[i].permalink;
        let NFTCollection = NFTAssets.assets[i].asset_contract.name;
        let NFTtopBid =NFTAssets.assets[i].top_bid;
        let NFTSlug = NFTAssets.assets[i].collection.slug;
        let NFTCollectionBanner = NFTAssets.assets[i].collection.banner_image_url;

        if(!NFTCollections.includes(NFTSlug))
        {
          console.log('adding ' + NFTSlug +' to array');
          NFTCollections.push(NFTSlug);

          if(NFTCollectionBanner==null)
          {
            NFTCollectionBanner='https://upload.wikimedia.org/wikipedia/commons/thumb/8/89/HD_transparent_picture.png/64px-HD_transparent_picture.png';
          }

          let collection_Stats_container_innerHTML =`
          <div id="Collection_stats_${NFTSlug}" class="col-5 card" style="width: 9rem;padding-right: 0; padding-left: 0;" data-bs-toggle="collapse" data-bs-target="#collapsed_stats_${NFTSlug}" aria-expanded="false" aria-controls="collapsed_stats_${NFTSlug}">
            <div  class="ratio ratio-16x9" style>
              <img src="${NFTCollectionBanner}" alt="${NFTCollection}" style="object-fit: cover; padding-right: 0; padding-left: 0;" class="card-img-top">
            </div>
            <div class="card-body p-1">
                <p class="card-title h6 text-truncate d-inline-block" style="max-width:100%" id="slug_Name_${NFTSlug}">${NFTCollection}</p>
            </div>
            <div class="card-footer card-title border-0 h6 p-1 bg-white floor-price-collection-card-${NFTSlug}">--
            </div>
          </div>`
          ;
          document.getElementById('Collection_Stats_Container').innerHTML+=collection_Stats_container_innerHTML;
        }

        let NFTCollectionURL = "https://opensea.io/collection/"+NFTSlug;

        if(NFTtopBid==null)
        {
          NFTtopBid="N/A";
        }

        let NFTCardContent = `
        <div id="${NFTID}" class="card flex-fill d-flex justify-content-center justify-content-sm-start w-sm-50 col-sm-5 " style="max-width: 18rem; width:14rem;padding-right: 0; padding-left: 0;">
          <div  class="ratio ratio-1x1" style>
            <img id="${NFTID}-${NFTImage}" src="${NFTImage}" alt="${NFTName}" style="object-fit: cover; padding-right: 0; padding-left: 0;" class="card-img-top">
          </div>
          <div class="card-body p-1 pb-2">
            <a id="${NFTID}-${NFTpermalink}" href="${NFTpermalink}" class="text-decoration-none text-reset">
              <p id="${NFTID}-${NFTName}" class="card-title h5">${NFTName}</p>
            </a>
            <a id="${NFTID}-${NFTCollectionURL}" href="${NFTCollectionURL.toLowerCase()}" class="text-decoration-none text-reset">
              <p id="${NFTID}-${NFTCollection}" class="card-title h6">${NFTCollection}</p>
            </a>
          </div>
          <table class="table table-borderless max-width align-self-end table-sm py-1">
            <thead>
              <tr>
                <th scope="col">Floor Price</th>
                <th scope="col"></th>
                <th scope="col"></th>
                <th scope="col">Top Bid</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="floor-price-${NFTSlug}" scope="row">--</td>
                <td></td>
                <td></td>
                <td id="${NFTID}-${NFTtopBid}">${NFTtopBid}</td>
              </tr>
            </tbody>
          </table>
        </div>`;

        if (document.getElementById(NFTID)==null)
        {
          document.getElementById('NFTCardsContainerToBeFilled').innerHTML += NFTCardContent;
        }
        else
        {
            document.getElementById(NFTID+'-'+NFTImage).src = NFTImage;
            document.getElementById(NFTID+'-'+NFTImage).alt = NFTName;
            document.getElementById(NFTID+'-'+NFTpermalink).href = NFTpermalink;
            document.getElementById(NFTID+'-'+NFTName).innerHTML = NFTName;
            document.getElementById(NFTID+'-'+NFTCollectionURL).href = NFTCollectionURL.toLowerCase();
            document.getElementById(NFTID+'-'+NFTCollection).innerHTML = NFTCollection;
            document.getElementById(NFTID+'-'+NFTtopBid).innerHTML = NFTtopBid;
        }
        if(i==(NFTAssets.assets.length-1))
        {
          updateStats();
        }

      }
      if(firstupdate===1 && NFTCollections.length>1)
      {
        console.log("updating stats");
        updateStats();
      }
      console.log(NFTCollections);

}

async function renderCollectionCards()
{
}

async function getCollections(ETHaddress)
{

}

async function updateStats()
{
        firstupdate=0;
        var NFT_Value=0;
        console.log(Object.keys(NFTCollections).length);
        document.getElementById('collection_stats_collapsed_container').innerHTML="";
              for (let i = 0; i < NFTCollections.length; i++)
              {
                let collectionname= NFTCollections[i];
                let tempURL = `/web3/api?apiCall=${collectionAPICall}${collectionname}/stats`;
                const NFSTStatsCallAPIdata = { apiCall: tempURL};

                let headers = new Headers();
                headers.set('Content-type', 'application/json');
                const NFTStatsAPIOptions =
                  {
                      method: 'GET',
                      headers: headers,
                  };
                  //console.log(NFTStatsAPIOptions.toString());

                  let NFSTStatsCallAPI = await fetch(tempURL,NFTStatsAPIOptions);//NFSTStatsCallAPIdata );

                  let NFTStatsCallSText = await NFSTStatsCallAPI.text();
                  const NFTStatsJSONObj = JSON.parse(NFTStatsCallSText);

                  let one_day_volume = Number(NFTStatsJSONObj.stats.one_day_volume);
                  let one_day_change = Number(NFTStatsJSONObj.stats.one_day_change);
                  let one_day_sales = Number(NFTStatsJSONObj.stats.one_day_sales);
                  let one_day_average_price = Number(NFTStatsJSONObj.stats.one_day_average_price);
                  let seven_day_volume = Number(NFTStatsJSONObj.stats.seven_day_volume);
                  let seven_day_change = Number(NFTStatsJSONObj.stats.seven_day_change);
                  let seven_day_sales = Number(NFTStatsJSONObj.stats.seven_day_sales);
                  let seven_day_average_price = Number(NFTStatsJSONObj.stats.seven_day_average_price);
                  let thirty_day_volume = Number(NFTStatsJSONObj.stats.thirty_day_volume);
                  let thirty_day_change = Number(NFTStatsJSONObj.stats.thirty_day_change);
                  let thirty_day_sales = Number(NFTStatsJSONObj.stats.thirty_day_sales);
                  let thirty_day_average_price = Number(NFTStatsJSONObj.stats.thirty_day_average_price);
                  let total_volume = Number(NFTStatsJSONObj.stats.total_volume);
                  let total_sales = Number(NFTStatsJSONObj.stats.total_sales);
                  let total_supply = Number(NFTStatsJSONObj.stats.total_supply);
                  let count = Number(NFTStatsJSONObj.stats.count);
                  let num_owners = Number(NFTStatsJSONObj.stats.num_owners);
                  let average_price = Number(NFTStatsJSONObj.stats.average_price);
                  let num_reports = Number(NFTStatsJSONObj.stats.num_reports);
                  let market_cap = Number(NFTStatsJSONObj.stats.market_cap);
                  let floor_price = Number(NFTStatsJSONObj.stats.floor_price);

                  let matches = document.getElementsByClassName(`floor-price-${NFTCollections[i]}`);

                  for (var ii=0; ii<matches.length; ii++)
                  {
                    NFT_Value += Number(NFTStatsJSONObj.stats.floor_price);
                    matches.item(ii).innerHTML = '<i class="fa-brands fa-ethereum"></i> '+nFormatter((NFTStatsJSONObj.stats.floor_price*1),3);
                    console.log(`floor-price-${NFTCollections[i]} : ${NFTStatsJSONObj.stats.floor_price}`);
                  }
                  let collectionrealname= document.getElementById(`slug_Name_${collectionname}`).innerHTML;
                  let collection_Stats_collapsed_container_innerHTML = `
                  <div class="collapse" id="collapsed_stats_${collectionname}">
                    <p class="card-title text-center h4 py-2">${collectionrealname}</p>
                    <div class="section">
                      <div class="row flex-row align-items-start p-2">
                        <div class="col p-2">
                          <div class="row m-1 bg-light">
                            <div class="col" >
                              <p>
                                Supply: ${nFormatter(total_supply,2)}
                                <br>
                                Owners: ${nFormatter(num_owners,2)}
                              </p>
                            </div>
                            <div class="col">
                              <p>
                                  Floor:  <i class="fa-brands fa-ethereum"></i> ${nFormatter((floor_price*1),3)} $${nFormatter((floor_price*ETH_USD),2)}
                                <br>
                                  Avg. Price: <i class="fa-brands fa-ethereum"></i> ${nFormatter(average_price,2)} $${nFormatter((average_price*ETH_USD),2)}
                              </p>
                            </div>
                            <div class="col">
                              <p>
                                  Sales: ${nFormatter(total_sales,2)}
                                  <br>
                                  Market Cap: <i class="fa-brands fa-ethereum"></i> ${nFormatter(market_cap , 2)} $${nFormatter((market_cap*ETH_USD), 2)}
                              </p>
                            </div>
                          </div>
                          <div class="row p-2">
                            <div class="col p-2" >
                              <details open class="p-1 bg-light">
                                <summary>24H Volume: ${Math.round((one_day_change*100) * 100) / 100}%</summary>
                                Sales: ${nFormatter(one_day_sales,1)}
                                <br>
                                Volume: <i class="fa-brands fa-ethereum"></i> ${nFormatter(one_day_volume,2)} $${nFormatter((one_day_volume*ETH_USD), 2)}
                                <br>
                                Avg. Price: <i class="fa-brands fa-ethereum"></i> ${nFormatter(one_day_average_price,2)} $${nFormatter((one_day_average_price*ETH_USD),2)}
                              </details>
                            </div>
                            <div class="col p-2">
                              <details open class="p-1 bg-light">
                                <summary>7D Volume: ${Math.round((seven_day_change*100) * 100) / 100 }%</summary>
                                Sales: ${nFormatter(seven_day_sales, 1)}
                                <br>
                                Volume: <i class="fa-brands fa-ethereum"></i> ${nFormatter(seven_day_volume, 2)} $${nFormatter((seven_day_volume*ETH_USD), 2)}
                                <br>
                                Avg. Price: <i class="fa-brands fa-ethereum"></i> ${nFormatter(seven_day_average_price, 2)} $${nFormatter((seven_day_average_price*ETH_USD), 2)}
                              </details>
                            </div>
                            <div class="col p-2">
                              <details open class="p-1 bg-light">
                                <summary>30D Volume: ${Math.round((thirty_day_change*100) * 100) / 100}%</summary>
                                Sales: ${nFormatter(thirty_day_sales, 1)}
                                <br>
                                Volume: <i class="fa-brands fa-ethereum"></i> ${nFormatter(thirty_day_volume, 2)} $${nFormatter((thirty_day_volume*ETH_USD), 2)}
                                <br>
                                Avg. Price: <i class="fa-brands fa-ethereum"></i> ${nFormatter(thirty_day_average_price, 2)} $${nFormatter((thirty_day_average_price*ETH_USD), 2)}
                              </details>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>`;

                  document.getElementById('collection_stats_collapsed_container').innerHTML+=collection_Stats_collapsed_container_innerHTML;
                  document.getElementsByClassName(`floor-price-collection-card-${collectionname}`)[0].innerHTML = `<i class="fa-brands fa-ethereum"></i> ${nFormatter((floor_price*1),3)} $${nFormatter((floor_price*ETH_USD),2)}`;


              }
              document.getElementById('NFT-total').innerHTML=`<i class="fa-brands fa-ethereum"></i> ${nFormatter((NFT_Value*1),3)}`;
              document.getElementById('NFT-total-usd').innerHTML=`$${nFormatter((NFT_Value*ETH_USD),2)}`;
              console.log(NFT_Value);
  }
  
  async function ETH_USDrefresh()
  {
    while(true)
    {
      let ETH_USD_call_OBJ = await fetch(coingeckoEthAPICall);
      let ETH_USD_call_text = await ETH_USD_call_OBJ.text();

       ETH_USD_OBJ = JSON.parse(ETH_USD_call_text);
       ETH_USD = ETH_USD_OBJ.ethereum.usd;
       //updateStats()
       await sleep(5000);
    }
  }

</script>

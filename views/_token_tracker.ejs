
<div class="container-fluid w-100 bg-light">
	<div class="table table-responsive w-100 d-md-table">

		<table class="table table-hover w-100">
			<thead>
				<div class="d-flex mb-3">
					<div class="p-2 card-title h4">Token Tracker</div>
					<div class="ms-auto p-2 is-size-7 has-text-right "><abbr id="refresh_token_tracker_counter" title="Seconds since last refresh">0</abbr></div>
				</div>

				<tr>
					<th><abbr title="Token Name">Name</abbr></th>
					<th style="text-align: right;"><abbr title="Token Price in USD">Price</abbr></th>
				</tr>
			</thead>
			<tbody id="token_watchlist">

			</tbody>
		</table>
	</div>
</div>

<script>
	//api call
	let coingecko_api_token_usd_head = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=";//"https://api.coingecko.com/api/v3/simple/price?ids=";
	let coingecko_api_token_usd_tail = "&order=market_cap_desc&per_page=250&page=1&sparkline=true&price_change_percentage=24h";

	let tracked_tokens = ["ethereum", "bitcoin", "decentral-games-ice", "gala" ];

	coingecko_ids_to_track.push(tracked_tokens);
	getWatchlistApi();
	let trackerSecCounter = 0;
	let hour_mark=true;
	refreshTokenTrackerCounter();

	let token_networth=0;

	//json parser and fill HTML text
	async function getWatchlistApi()
	{
		while (true)
		{
			let coingecko_api_token_usd = coingecko_api_token_usd_head;


			for (let i = 0; i < coingecko_ids_to_track.length; i++)
			{
				if(i===(coingecko_ids_to_track.length-1))
				{
					coingecko_api_token_usd+=`${coingecko_ids_to_track[i]}${coingecko_api_token_usd_tail}`;
				}
				else
				{
					coingecko_api_token_usd+=`${coingecko_ids_to_track[i]}%2C`;
				}
			}
			//console.log(coingecko_api_token_usd);
			let myObject = await fetch(coingecko_api_token_usd);
			let myText = await myObject.text();
			const token_obj = JSON.parse(myText);

			let tacker_obj_keys = Object.keys(token_obj);

			for (let i = 0; i < token_obj.length; i++)
			{
				let token_id=token_obj[i].id;
				let token_symbol=token_obj[i].symbol;
				let token_name=token_obj[i].name;
				let token_image=token_obj[i].image;
				let token_current_price=token_obj[i].current_price;
				let token_market_cap=token_obj[i].market_cap;

				//let token_id=token_obj[i].market_cap_rank;
				//let fully_diluted_valuation=token_obj[i].fully_diluted_valuation;
				//let token_id=token_obj[i].total_volume;
				let token_price_change_percentage_24h=token_obj[i].price_change_percentage_24h;


				if((document.getElementById(`${token_id}_Name`) == null) && (tracked_tokens.includes(token_id)))
				{
					let token_tracker_row = `
					<tr>
						<th style="text-align: left;">
							<div class="text-uppercase" id="${token_id}_Ticker">${token_symbol}</div>
							<div class="h6 text-muted" id="${token_id}_Name">${token_name}</div>
						</th >
						<td style="text-align: right;" id="${token_id}_price">$${nFormatter(token_current_price,2)}</td>
					</tr>
					`;
					document.getElementById("token_watchlist").innerHTML += token_tracker_row;

					//console.log(token_obj[token_id].usd);
					//console.log(token_id);
				}

				if(document.getElementById(`${token_id}_Name`) != null)
				{
					document.getElementById(`${token_id}_price`).innerHTML = "$"+nFormatter(token_current_price,3);
				}

				if(token_id=="bitcoin")
				{
					btcprice = token_current_price;
				}

				if(document.getElementById(`wallet_${token_id}_balance_usd`) != null)
				{

					let token_balance_formatted = nReverseFormatter(document.getElementById(`wallet_${token_id}_balance`).innerHTML);



					//count token networth
					token_networth+= (token_balance_formatted)*(token_current_price);
					document.getElementById("token-total-usd").innerHTML=`$${nFormatter(token_networth,2)}`;



					/*if(document.getElementById(`wallet_${token_id}_image`)!=null)
					{
						document.getElementById(`wallet_${token_id}_image`).src=token_image;
					}*/

					//console.log(`${token_id}:  $${nFormatter(token_balance_formatted*token_obj[token_id].usd,2)}`);
					//console.log(`${token_id} format:  ${token_balance_formatted}`);
					if((nFormatter((token_balance_formatted)*token_current_price,2))=="0")
					{
						let element_to_remove = document.getElementById(`wallet_${token_id}`);
						element_to_remove.remove();
					}
					else
					{
						document.getElementById(`wallet_${token_id}_balance_usd`).innerHTML = `$${nFormatter(token_balance_formatted*token_current_price,2)}`;
						document.getElementById(`wallet_${token_id}_image`).src=token_image;

						if(true)
						{
							let token_sparkline_7d = groupAverage(token_obj[i].sparkline_in_7d.price,4);
							let xValues = [];
							for (var ii = 0; ii < token_sparkline_7d.length; ii++)
							{
								//token_sparkline_7d.push( token_obj[i].sparkline_in_7d.price[ii]);
								xValues.push(ii)
							}
							//token_sparkline_7d = token_obj[i].sparkline_in_7d.price;
							//console.log("sparkline data",token_sparkline_7d);


							var yValues = token_sparkline_7d;

							new Chart(`wallet_${token_id}_chart`, {
								type: "line",
								data: {
									labels: xValues,
									datasets: [{
										fill: false,
										lineTension: 0,
										backgroundColor: "rgba(0,0,0,1)",
										borderColor: "rgba(0,0,0,1)",
										data: token_sparkline_7d,
										pointRadius: 0,
									}],
								},
								options:
								{
									maintainAspectRatio: false,
									responsive: true,
									borderWidth:0,
									borderColor:"rgba(0,0,0,1)",
									legend: {display: false},
									interaction: {
									      intersect: false,
									      mode: 'index',
									    },
									//yAxes: [{ticks: {min:  Math.min.apply(this, token_sparkline_7d), max: Math.max.apply(this, token_sparkline_7d)}}],
									animation: {
										duration: 0 // general animation time
									},
									hover: {
										animationDuration: 0 // duration of animations when hovering an item
									},
									responsiveAnimationDuration: 0 ,// animation duration after a resize
									scales:
									{
										scaleLineColor: 'transparent',
										xAxes:
										[{
											display: false,
											gridLines: {
												color: "rgba(0, 0, 0, 0)",
												drawBorder: false,
												borderWidth:0,
											},
											ticks: {
									                display: false
										    	},
											grid:
											{
												borderColor: "rgba(0, 0, 0, 0)",
												borderWidth:0,
											},
										}],
										yAxes:
										[{
											gridLines: {
												color: "rgba(0, 0, 0, 0)",
												display: false,
												borderWidth:0,
												tickMarkLength: false,
												drawBorder: false,
											},
											ticks: {
									                display: false
										    	},
											grid:
											{
												borderColor: "rgba(0, 0, 0, 0)",
												borderWidth:0,
											},
										}]
									},
									plugins:
									{
										chartAreaBorder:
										{
									        	borderColor: 'red',
									        	borderWidth: 2,
									        	borderDash: [5, 5],
									        	borderDashOffset: 2,
									      }
									},
									scaleLineColor: "rgba(0, 0, 0, 0)",
								},
							});

							if(i==token_obj.length-1)
							{
								hour_mark=false;
							}
						}
					}
				}

			}
			let nft_total_usd =0;
			if(!document.getElementById("NFT-total-usd").innerHTML.includes("placeholder"))
			{
				nft_total_usd=nReverseFormatter(document.getElementById("NFT-total-usd").innerHTML.substring(1));
			}

			//console.log("NFT total: ", nft_total_usd);
			//console.log("Token total: ", token_networth);

			if(nft_total_usd+token_networth=='0')
			{
				document.getElementById(`networth_usd`).innerHTML=`<span class="placeholder col-6"></span>`;
			}
			if(nft_total_usd+token_networth!='0')
			{
				document.getElementById(`networth_usd`).innerHTML= `$${nFormatter(nft_total_usd+token_networth,2)}`;
			}

			await sleep(5000);
			trackerSecCounter=0;
			token_networth=0;
		}
	}
	//refresh counter since successful api call
	async function refreshTokenTrackerCounter()
	{
		let counter=0;
		while (true)
		{
			document.getElementById("refresh_token_tracker_counter").innerHTML = trackerSecCounter;
			await sleep(1000);
			trackerSecCounter++;
			counter++;
			if(counter>=60)
			{
				counter=0;
				hour_mark=true;
			}
		}
	}

	function groupAverage(arr, n) {
	  var result = [];
	  for (var i = 0; i < arr.length;) {
	    var sum = 0;
	    for(var j = 0; j< n; j++){
	      // Check if value is numeric. If not use default value as 0
	      sum += +arr[i++] || 0
	    }
	    result.push(sum/n);
	  }
	  return result
	}
	//https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=bitcoin%2Cethereum%2Cgala&order=market_cap_desc&per_page=250&page=1&sparkline=true&price_change_percentage=24h
</script>
